$Id: CREATING_LOCAL_INDEXED_DATABASES.txt,v 1.1 2003/02/20 20:50:50 lstein Exp $

CREATING OBDA-COMPLIANT INDEXED SEQUENCE FILES

The Open Biological Database Access (OBDA) standard specifies a way of
generating indexes for entry-based sequence files (e.g. FASTA, EMBL)
so that the entries can be looked up and retrieved quickly.  These
indexes are created and accessed using the Bio::DB::Flat module.

Bio::DB::Flat has the same functionality as the various Bio::Index
modules.  The main reason to use it is if you want to use the
BioSequence Registry system (see BIODATABASE_ACCESS.txt), or if you
want to share the same indexed files among scripts written in other
languages, such as those written with BioJava or BioPython.

There are three steps to creating a Bio::DB::Flat database:

  1) select a root directory in which all the indexed databases will 
     be stored.
  2) move the flat files into a good location
  3) choose a symbolic name for the database
  4) run the bioflat_index.pl script to load the sequence files into
     the database.

1. Select a Root Directory

Select a directory in which the flat file indexes will be stored.
This directory should be writable by you, and readable by everyone who
will be running applications that access the sequence data.

2. Move the Flat Files Into a Good Location

The indexer records the path to the source files (e.g. FASTA, or local
copies of GenBank, Embl or SwissProt).  This means that you must not
change the location or name of the source files after running the
indexer.  Pick a good stable location for the source files and move
them there.

3. Choose a symbolic name for the database

Choose a good symbolic name for the database.  For example, if you are
mirroring GenBank, "genbank" might be a good choice.  The indexer will
create files in a subdirectory by this name located underneath the
root directory.

4) Run the bioflat_index Script

The final step is to run the bioflat_index script.  This script is
located in the Bio{Perl,Java,Ruby,Python} distribution in the following locations:

	Perl   bioperl-X.XX/scripts/DB
        Ruby   <to come>
        Python <to come>
        Java   <to come>

The script is named using language conventions.  For example, on Python systems it 
is named bioflat_index.py.  For your convenience, you may want to copy the script 
to /usr/bin or another system-wide directory.

The first time you run the script, the typical usage is as follows:

  bioflat_index.py --create --location /usr/share/biodb 
            --dbname genbank --indextype bdb --format fasta data/*.fa

The following command line options are required:

  --create     create a new index
  --location   path to the root directory
  --dbname     symbolic name for the new database
  --indextype  indexing scheme (discussed below)
  --format    source file format

Some languages allow you to abbreviate the options. For example,
the Perl implementation will let you abbreviate to single character
options, such as -c for --create.  See your Bio* distribution
for details.

The --create option must be present to create the database.  If the database
already exists, --create will reinitialize the index, wiping out its current
contents.

The --location option specifies the root directory for the database indexes.

The --dbname option chooses the symbolic name for the new database.  If the
--create option is specified, this will cause a new directory to be created
underneath the root directory.

The --indextype option selects the indexing scheme.  Currently there are two
indexing schemes supported: "bdb" and "flat."  "bdb" selects an index
based on the BerkeleyDB library.  It is generally the faster of the
two, but it requires both the BerkeleyDB library and the Perl DB_File
module to be installed on your system.  "flat" is a sorted text-based
index that uses a binary search algorithm to rapidly search for
entries.  Although not as fast as bdb, the flat indexing system has
good performance for even large databases, and it has no requirements
beyond Perl itself.  Once an indexing scheme has been selected there
is no way to change it other than recreating the index from scratch
using the --create option.

The --format option specifies the format of the source database files.  It
must be one of the formats that BioPerl supports, including "genbank",
"swiss", "embl" or "fasta".  Consult the Bio::SeqIO documentation for
the complete list.  All files placed in the index must share the same
format.

The indexing script will print out a progress message every 1000
entries, and will report the number of entries successfully indexed at
the end of its run.

To update an existing index run bioflat_index.pl without the --create option
and list the files to be added or reindexed.  The --location and --dbname options
are required, but the indexing scheme and source file format do not
have to be specified for updating as they will be read from the
existing index.

For your convenience, bioflat_index.pl will take default values from
the following environment variables:

     OBDA_FORMAT      format of sequence file (--format)
     OBDA_LOCATION    path to directory in which index files are stored (--location)
     OBDA_DBNAME      name of database (--dbname)
     OBDA_INDEX       type of index to create (--indextype)

MOVING DATABASE FILES

If you must change the location of the source sequence files after you
create the index, there is a way to do so.  Inside the root directory
you will find a subdirectory named after the database, and inside that
you will find a text file named "config.dat."  An example config.dat
is shown here:

  index	flat/1
  fileid_0	/share/data/alnfile.fasta	294
  fileid_1	/share/data/genomic-seq.fasta	171524
  fileid_2	/share/data/hs_owlmonkey.fasta	416
  fileid_3	/share/data/test.fasta	804
  fileid_4	/share/data/testaln.fasta	4620
  primary_namespace	ACC
  secondary_namespaces	ID
  format	URN:LSID:open-bio.org:fasta

For each source file you have moved, find its corresponding "fileid"
line and change the path.  Be careful not to change anything else in
the file or to inadvertently replace tab characters with spaces.
