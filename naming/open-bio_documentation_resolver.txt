OBDA DOCUMENTATION RESLOVER, VERSION 0.1
----------------------------------------

This is a document that specifies a standard way for accessing documentation
associated with OBDA URNs.

The format of OBDA URNs and the standard way of registering URNs and their
documentation is described in OBDA URN FORMATS in the file
naming/open-bio_urns.txt in the CVS module obda-specs in the repository
pub.open-bio.org:/home/repository/obf-common.

There are other mechanisms for resolving URNs to documentation, and this
document does not preclude their use. However, in the absence of anything else,
this is a sensible thing to do.

JUSTIFICATION
-------------

URNs are used to uniquely name resources. In the context of the OBDA, these are
resources associated with biological objects and bioinformatics concepts.
It is a good idea to chose names so that they explain to a human user what they
represent. However, this can not be relied upon, particularly as names that are
obvios to one person may be very non-obvious or even counter-intuitive to
another. To address this, the OBDA URN specification describes a mechanism
whereby URNs and their namespaces can be documented in a human-readable
manner.

The purpose of this document is to describe a simple way that these descriptions
can be accesed using URNs so that users may read them.

THE LIMITS OF THIS PROPOSAL
---------------------------

There is no attempt made in this proposal to describe in detail any API or
implementation that would make any resource availabe. That is wholely the
responsibility of the implementors. It will, however, where apropreate
describe some possible ways of implementing particular portions.

It is expected that where ever possible, a standard API would be used to
implement this specification. For example, in Java, JNDI would be a logical
choice. APIs specific to resolving OBDA URNs in geneal and for resolving
documentation associated with these in particular is discouraged.

RESOLVING OBDA URNS TO DOCUMENTATION
------------------------------------

Documentation for OBDA URNs should be deposited in the naming/namespaces
directory in the CVS module obda-specs in the repository
pub.open-bio.org:/home/repository/obf-common as described in the DOCUMENTING
IDENTIFIERS section of the OBDA URN FORMATS documentation. In this directory,
file names should have a name that starts with a full OBDA URN. Files ending
in the suffix :.id are documentation for the URNs themselves. Files ending
in the suffix :.ns are documentation for namespaces containing URNS.

An OBDA URN documentation service should accept an OBDA URN and return the
documentation associated with that URN. The documentation should be equivalent
to the documentation deposited in the namespaces directory. Sensible things to
resolve to would inclide a URL to the web-cvs view of these files, the raw
ascii of the files as a string and an HTML document containing the text with
links marked up as appropreate. It would not be apropreate for this namespace
to resolve the URN to a resource that is not directly related to the
documentation associated with the URN, such as a a class diagram, an object
that publishes that it is of a type associated with that URN, or an application.

If the URN being resolved is a full URN, it should resolve to the documentation
associated with the :.id file. If it is a URN with a trailing :, then it should
resolve to the :.ns file. If the URN can not be resolved, the registry should
perform whatever action is normal to inform the user that documentation for
that URN could not be found, such as raising an exception, opening a dialog
box, or returning an empty set or null pointer.

Any service that resolves OBDA URNs in a manner different to that described
above is not an OBDA documentation service.

IMPLEMENTATION SUGESTIONS
-------------------------

Three obvious implementations are present: web-cvs access to open-bio cvs,
import as a resource and delegation to another directory service
implementation.


A resolver could make HTTP requests to the open-bio web-cvs server to
retrieve the current (or any other version) of the documentation associated
with the URNs. The benefit of this is that the implementation would be
relatively simple, and it would not have to manage any local coppies of the
documentation. The major problem is that this makes the implementation reliant
uppon the continual presence of the web-cvs server at that URL. The server may
experience down-time, or possibly even move IP or web address. The exact
web-cvs implementation may change, invalidatig the old URLs.

A reslover could reslove to a local image of the documentation. This image
would presumably be an image of the documentation as it was in CVS at a
particular instant. For example, in biojava, we could import an image of the
namespace directory into the resources directory. The documentation service
implementation could then fetch data from these resources. The benefit of this
is that it is independant of the continual running of the open-bio CVS server.
The major draw-back is that modifications to the core CVS may not be
propogated in a timely manner.

A resolver could delegate to another naming and directory service. This
'punts' the issue of both keeping the service available and of keeping up with
new IDs and namespaces.

EXAMPLES
--------

Assuming that there was a JNDI implementation of the OBDA URN documentation
service, the following would be possible.

DirContext obdaDocService = ...;

ObdaUrn emblUrn = ObdaUrn.valueOf("urn:open-bio.org:format:embl");
ObdaUrn formatNsUrn = ObdaUrn.valueOf("urn:open-bio.org:format:");

System.err.println("Resloving " + emblUrn + " to documentation:"); 
System.out.println(obdaDocService.lookup(emblUrn);

System.err.println("Resolving " + formatNsUrn " + to documentation:");
System.out.println(obdaDocService.lookup(formatNsUrn);

LOOSE ENDS
----------

I am not sure that the trailing colon aproach adopted above is the best way to
differentiate identifiers from namespaces. In particular, it is possible that
some naming and directory APIs will treat the URN with and without the trailing
colon as equivalent.

In the future, we may have other information available about OBDA LSIDs, such
as RDF or co-ordinates in UML diagrams. The reccomendation here is not
extensible to these cases.

An alternative is to use the ':.ns' and ':.id' suffixes explicitly. The example
above would then become:

ObdaUrn emblUrn = ObdaUrn.valueOf("urn:obda:format:embl");
DirContext emblCtxt = (DirContext) obdaDocService.lookup(emblUrn);
System.out.println(emblCtxt.lookup("id");

ObdaUrn formatUrn = ObdaUrn.valueOf("urn:obda:format");
DirContext formatCtxt = (DirContext) obdaDocServicce.lookup(formatUrn);
System.out.println(formatCtxt.lookup("ns");

This in the future would allow us to say things like:

Rdf formatRdf = (Rdf) formatCtxt.lookup("rdf");

The problem with this, is that potentialy there will be namespaces and names
that in this form have the same ID. If there is meta-data associated with these
under the same suffix, then these operations become ambiguous.

AUTHORS
-------

Matthew Pocock (initial draft)
